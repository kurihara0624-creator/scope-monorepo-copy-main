rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /one-on-ones/{oneOnOneId} {
      allow create: if isSignedIn();

      allow read: if isSignedIn() &&
        (resource.data.managerId == request.auth.uid ||
         resource.data.memberId == request.auth.uid);

      allow update, delete: if isSignedIn() && resource.data.managerId == request.auth.uid;
    }

    match /users/{userId} {
      allow read: if isSignedIn();

      allow create: if isSignedIn() && request.auth.uid == userId;

      allow update: if isSignedIn() &&
        (request.auth.uid == userId || isAdmin());

      allow delete: if isSignedIn() &&
        (request.auth.uid == userId || isAdmin());
    }

    match /teamInvites/{inviteId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    match /teamChangeRequests/{requestId} {
      allow create: if isSignedIn() &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.status == 'open';

      allow read: if isSignedIn() &&
        (resource.data.uid == request.auth.uid || isAdmin());

      allow update, delete: if isAdmin();
    }
  }
}

